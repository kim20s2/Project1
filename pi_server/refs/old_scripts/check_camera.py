import cv2
import numpy as np
#???? : python3 -m venv stt_env_310 --system-site-packages
#???? : source stt_env_310/bin/activate
#???? ?? : sudo apt-get install gstreamer1.0-tools gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly libgstreamer1.0-dev
#???? ?? : sudo apt-get install libgtk2.0-dev pkg-config
#???? ?? : sudo apt-get install python3-opencv
# ???? GStreamer ?????
# v4l2src: ?? ??? ???? ??
# video/x-raw: ???(640x480)? ???(30fps) ??
# videoconvert: ?? ?? ??
# appsink: OpenCV? ???? ??? ? ??? ??? ???
gst_str = "v4l2src device=/dev/video0 ! video/x-raw,width=640,height=480,framerate=30/1 ! videoconvert ! appsink"

# GStreamer ?????? ???? VideoCapture ?? ??
cap = cv2.VideoCapture(gst_str, cv2.CAP_GSTREAMER)

if not cap.isOpened():
    print("GStreamer ?????? ?? ???? ? ? ????.")
    exit()

print("???? ????? ?????! 'q'? ??? ?????.")

while True:
    ret, frame = cap.read()
    if not ret:
        print("???? ??? ? ????. ?????.")
        break

    # 1. ?? ??? (640x480) ??? ??
    cv2.imshow("Original Frame (GStreamer)", frame)

    # 2. OpenCV? ???? ??? ?? ?? (240x240)
    # cv2.INTER_AREA? ??? ?? ? ??? ?? ????.
    resized_frame = cv2.resize(frame, (224, 224), interpolation=cv2.INTER_AREA)

    # 3. ??? ??? ??? ??
    cv2.imshow("Resized Frame (OpenCV)", resized_frame)

    # --- Hailo ??? ?? ?? ??? ---
    # 3-1. BGR -> RGB
    rgb_frame = cv2.cvtColor(resized_frame, cv2.COLOR_BGR2RGB)
    
    # 3-2. ???
    normalized_frame = rgb_frame.astype(np.float32) / 255.0
    
    # 3-3. ?? ?? ??
    input_tensor = np.expand_dims(normalized_frame, axis=0)
    
    # 4. ??? input_tensor? Hailo ???? ???? ?? ??
    # ?: results = hailo_model.run(input_tensor)
    # 'q' ?? ??? ?? ??
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# ?? ?? ??
cap.release()
cv2.destroyAllWindows()